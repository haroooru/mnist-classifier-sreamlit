# -*- coding: utf-8 -*-
"""mnist_classifier

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RNMv_tRDSeDGiFIggdp2HIGZyV9-bB3w
"""

import numpy as np

# Simple CNN-like classifier without TensorFlow, just as an example
# (Replace with your actual model or training code as needed)

def preprocess(image):
    """Assuming image is a 28x28 grayscale numpy array normalized between 0-255."""
    return image.flatten() / 255.0  # Flatten and normalize

class SimpleMNISTClassifier:
    def __init__(self):
        # Just a dummy model for example: random weights
        # Ideally, train your model here or load weights
        self.weights = np.random.randn(28*28, 10)
        self.bias = np.random.randn(10)

    def predict(self, image):
        x = preprocess(image)  # flatten and normalize
        logits = np.dot(x, self.weights) + self.bias
        probs = np.exp(logits) / np.sum(np.exp(logits))
        return np.argmax(probs), probs

# Example usage:
# model = SimpleMNISTClassifier()
# digit, probabilities = model.predict(image_array)